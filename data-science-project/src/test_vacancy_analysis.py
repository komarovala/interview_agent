"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π
"""

from openrouter_client import OpenRouterClient
from config import config
import json


def test_vacancy_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –í–ê–ö–ê–ù–°–ò–ô")
    print("="*50)
    
    client = OpenRouterClient()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
    test_vacancy = """
    Python Developer
    
    –ú—ã –∏—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏.
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Python 3+ (–º–∏–Ω–∏–º—É–º 3 –≥–æ–¥–∞)
    - –ó–Ω–∞–Ω–∏–µ Django –∏ Flask
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å PostgreSQL –∏ Redis
    - –ó–Ω–∞–Ω–∏–µ Docker –∏ Kubernetes
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Git
    - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ Intermediate
    - –£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ
    - –õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è
    
    –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - Code review
    - –†–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    –£—Å–ª–æ–≤–∏—è:
    - –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    - –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫
    - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    """
    
    print("üìã –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:")
    print(test_vacancy[:200] + "...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...")
    requirements = client.analyze_vacancy_requirements(test_vacancy)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(requirements)} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:")
    print("\nüìä –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    for i, req in enumerate(requirements, 1):
        skill = req.get('skill', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        level = req.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        category = req.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        importance = req.get('importance', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        print(f"{i:2d}. {skill}")
        print(f"    –£—Ä–æ–≤–µ–Ω—å: {level}")
        print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"    –í–∞–∂–Ω–æ—Å—Ç—å: {importance}")
        print()
    
    return requirements


def test_technical_questions_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –í–û–ü–†–û–°–û–í")
    print("="*50)
    
    client = OpenRouterClient()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞)
    test_requirements = [
        {"skill": "Python", "level": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "category": "–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "importance": "–≤—ã—Å–æ–∫–∞—è"},
        {"skill": "Django", "level": "–°—Ä–µ–¥–Ω–∏–π", "category": "–§—Ä–µ–π–º–≤–æ—Ä–∫–∏", "importance": "–≤—ã—Å–æ–∫–∞—è"},
        {"skill": "PostgreSQL", "level": "–°—Ä–µ–¥–Ω–∏–π", "category": "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "importance": "–≤—ã—Å–æ–∫–∞—è"},
        {"skill": "Docker", "level": "–°—Ä–µ–¥–Ω–∏–π", "category": "DevOps", "importance": "—Å—Ä–µ–¥–Ω—è—è"},
        {"skill": "–û–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "level": "3+ –≥–æ–¥–∞", "category": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "importance": "–≤—ã—Å–æ–∫–∞—è"},
        {"skill": "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "level": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "category": "Soft skills", "importance": "–≤—ã—Å–æ–∫–∞—è"}
    ]
    
    print("üìã –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    for req in test_requirements:
        print(f"  ‚Ä¢ {req['skill']} ({req['level']}) - {req['category']}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    print("\nü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã...")
    technical_questions = client.generate_technical_questions_from_analysis(
        test_requirements,
        "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        []
    )
    
    print(f"\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(technical_questions)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print("\n‚ùì –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´:")
    print("-" * 60)
    
    for i, question in enumerate(technical_questions, 1):
        print(f"{i}. {question}")
    
    return technical_questions


def test_fallback_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FALLBACK –ê–ù–ê–õ–ò–ó–ê")
    print("="*40)
    
    client = OpenRouterClient()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback
    simple_vacancy = "–ù—É–∂–µ–Ω Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã 2 –≥–æ–¥–∞. –ó–Ω–∞–Ω–∏–µ Django –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."
    
    print(f"üìã –ü—Ä–æ—Å—Ç–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {simple_vacancy}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –∞–Ω–∞–ª–∏–∑
    requirements = client._fallback_vacancy_analysis(simple_vacancy)
    
    print(f"\n‚úÖ Fallback –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(requirements)} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:")
    for req in requirements:
        print(f"  ‚Ä¢ {req['skill']} ({req['level']}) - {req['category']}")
    
    return requirements


def test_different_vacancy_types():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π"""
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –¢–ò–ü–û–í –í–ê–ö–ê–ù–°–ò–ô")
    print("="*50)
    
    client = OpenRouterClient()
    
    # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–∞–∫–∞–Ω—Å–∏–π
    vacancies = {
        "Frontend": """
        Frontend Developer
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - JavaScript ES6+
        - React –∏–ª–∏ Vue.js
        - HTML5, CSS3
        - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 1+ –≥–æ–¥
        - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
        """,
        
        "DevOps": """
        DevOps Engineer
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - Linux, Docker, Kubernetes
        - CI/CD (Jenkins, GitLab)
        - AWS –∏–ª–∏ Azure
        - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 3+ –≥–æ–¥–∞
        - Python –∏–ª–∏ Bash
        """,
        
        "Data Scientist": """
        Data Scientist
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - Python, R
        - Machine Learning
        - Pandas, NumPy, Scikit-learn
        - SQL
        - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 2+ –≥–æ–¥–∞
        """
    }
    
    results = {}
    
    for position, vacancy_text in vacancies.items():
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏—é: {position}")
        requirements = client.analyze_vacancy_requirements(vacancy_text)
        results[position] = requirements
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(requirements)} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:")
        for req in requirements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"  ‚Ä¢ {req['skill']} ({req['level']}) - {req['category']}")
        if len(requirements) > 3:
            print(f"  ... –∏ –µ—â–µ {len(requirements) - 3}")
    
    return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –í–ê–ö–ê–ù–°–ò–ô")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter: {'‚úÖ' if config.is_configured() else '‚ùå'}")
    if config.is_configured():
        print(f"   –ú–æ–¥–µ–ª—å: {config.model}")
    else:
        print("   –†–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
    requirements = test_vacancy_analysis()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    technical_questions = test_technical_questions_generation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –∞–Ω–∞–ª–∏–∑
    fallback_requirements = test_fallback_analysis()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–∞–∫–∞–Ω—Å–∏–π
    different_vacancies = test_different_vacancy_types()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê –í–ê–ö–ê–ù–°–ò–ô:")
    print(f"  ‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏: {len(requirements)} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–æ")
    print(f"  ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {len(technical_questions)} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    print(f"  ‚úÖ Fallback –∞–Ω–∞–ª–∏–∑: {len(fallback_requirements)} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
    print(f"  ‚úÖ –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–∞–∫–∞–Ω—Å–∏–π: {len(different_vacancies)} –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")
    print(f"  ‚úÖ OpenRouter: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.is_configured() else 'Fallback —Ä–µ–∂–∏–º'}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    test_result = {
        "vacancy_analysis": {
            "requirements_extracted": len(requirements),
            "requirements": requirements
        },
        "technical_questions": {
            "questions_generated": len(technical_questions),
            "questions": technical_questions
        },
        "fallback_analysis": {
            "requirements_extracted": len(fallback_requirements),
            "requirements": fallback_requirements
        },
        "different_vacancies": {
            "types_tested": len(different_vacancies),
            "results": {k: len(v) for k, v in different_vacancies.items()}
        },
        "openrouter_configured": config.is_configured(),
        "model": config.model if config.is_configured() else "fallback"
    }
    
    with open('vacancy_analysis_test_result.json', 'w', encoding='utf-8') as f:
        json.dump(test_result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ vacancy_analysis_test_result.json")
    print("üéâ –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    main()
