"""
–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph –∏ OpenRouter.ai
"""

from typing import Dict, Any, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
import json
from openrouter_client import OpenRouterClient
from config import config


class InterviewState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    def __init__(self):
        self.messages: List[Dict[str, str]] = []
        self.candidate_name: str = ""
        self.candidate_age: int = 0
        self.candidate_position: str = "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
        self.vacancy_text: str = ""
        self.vacancy_requirements: List[Dict[str, Any]] = []
        self.general_questions: List[str] = []
        self.general_answers: List[Dict[str, str]] = []
        self.technical_questions: List[str] = []
        self.technical_answers: List[Dict[str, str]] = []
        self.followup_questions: List[str] = []
        self.interview_questions: List[str] = []
        self.current_step: str = "start"
        self.ai_responses: List[str] = []
        self.analysis_results: List[Dict[str, Any]] = []
    
    def add_message(self, role: str, content: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.messages.append({"role": role, "content": content})
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "messages": self.messages,
            "candidate_name": self.candidate_name,
            "candidate_age": self.candidate_age,
            "candidate_position": self.candidate_position,
            "vacancy_text": self.vacancy_text,
            "vacancy_requirements": self.vacancy_requirements,
            "general_questions": self.general_questions,
            "general_answers": self.general_answers,
            "technical_questions": self.technical_questions,
            "technical_answers": self.technical_answers,
            "followup_questions": self.followup_questions,
            "interview_questions": self.interview_questions,
            "current_step": self.current_step,
            "ai_responses": self.ai_responses,
            "analysis_results": self.analysis_results
        }


class InterviewAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é"""
    
    def __init__(self):
        self.state = InterviewState()
        self.openrouter_client = OpenRouterClient()
        self.graph = self._create_graph()
    
    def _create_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ —Å –Ω–æ–¥–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é"""
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å —Ç–∏–ø–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
        workflow = StateGraph(dict)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–¥—ã
        workflow.add_node("get_name", self._get_name_node)
        workflow.add_node("get_age", self._get_age_node)
        workflow.add_node("get_vacancy_requirements", self._get_vacancy_requirements_node)
        workflow.add_node("ask_general_questions", self._ask_general_questions_node)
        workflow.add_node("generate_technical_questions", self._generate_technical_questions_node)
        workflow.add_node("ask_technical_questions", self._ask_technical_questions_node)
        workflow.add_node("generate_followup_questions", self._generate_followup_questions_node)
        workflow.add_node("finalize_interview", self._finalize_interview_node)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        workflow.set_entry_point("get_name")
        workflow.add_edge("get_name", "get_age")
        workflow.add_edge("get_age", "get_vacancy_requirements")
        workflow.add_edge("get_vacancy_requirements", "ask_general_questions")
        workflow.add_edge("ask_general_questions", "generate_technical_questions")
        workflow.add_edge("generate_technical_questions", "ask_technical_questions")
        workflow.add_edge("ask_technical_questions", "generate_followup_questions")
        workflow.add_edge("generate_followup_questions", "finalize_interview")
        workflow.add_edge("finalize_interview", END)
        
        return workflow.compile()
    
    def _get_name_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
        if not state:
            state = {
                "messages": [],
                "candidate_name": "",
                "candidate_age": 0,
                "candidate_position": "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                "vacancy_text": "",
                "vacancy_requirements": [],
                "general_questions": [],
                "general_answers": [],
                "technical_questions": [],
                "technical_answers": [],
                "followup_questions": [],
                "interview_questions": [],
                "current_step": "start",
                "ai_responses": [],
                "analysis_results": []
            }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ OpenRouter
        welcome_messages = [
            {"role": "system", "content": "–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –∏–Ω—Ç–µ—Ä–≤—å—é. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Å–ø—Ä–æ—Å–∏ –µ–≥–æ –∏–º—è."},
            {"role": "user", "content": "–ù–∞—á–Ω–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"}
        ]
        
        ai_response = self.openrouter_client.generate_response(welcome_messages)
        if ai_response:
            print(f"ü§ñ –ê–≥–µ–Ω—Ç: {ai_response}")
            state["ai_responses"].append(ai_response)
        else:
            print("ü§ñ –ê–≥–µ–Ω—Ç: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é! –ú–µ–Ω—è –∑–æ–≤—É—Ç InterviewBot.")
            print("ü§ñ –ê–≥–µ–Ω—Ç: –î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = input("üë§ –í–∞—à –æ—Ç–≤–µ—Ç: ").strip()
        
        if name:
            state["candidate_name"] = name
            state["messages"].append({"role": "assistant", "content": f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!"})
            state["messages"].append({"role": "user", "content": name})
            state["current_step"] = "name_collected"
            print(f"ü§ñ –ê–≥–µ–Ω—Ç: –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!")
        else:
            state["messages"].append({"role": "assistant", "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."})
            print("ü§ñ –ê–≥–µ–Ω—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        
        return state
    
    def _get_age_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ —á–µ—Ä–µ–∑ OpenRouter
        age_messages = [
            {"role": "system", "content": f"–¢—ã - HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –í–µ–∂–ª–∏–≤–æ —Å–ø—Ä–æ—Å–∏ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {state.get('candidate_name', '')} –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç."},
            {"role": "user", "content": "–°–ø—Ä–æ—Å–∏ –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"}
        ]
        
        ai_response = self.openrouter_client.generate_response(age_messages)
        if ai_response:
            print(f"ü§ñ –ê–≥–µ–Ω—Ç: {ai_response}")
            state["ai_responses"].append(ai_response)
        else:
            print("ü§ñ –ê–≥–µ–Ω—Ç: –°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        while True:
            try:
                age_input = input("üë§ –í–∞—à –æ—Ç–≤–µ—Ç: ").strip()
                age = int(age_input)
                
                if age > 0 and age < 100:
                    state["candidate_age"] = age
                    state["messages"].append({"role": "assistant", "content": f"–°–ø–∞—Å–∏–±–æ! –í–∞–º {age} –ª–µ—Ç."})
                    state["messages"].append({"role": "user", "content": str(age)})
                    state["current_step"] = "age_collected"
                    print(f"ü§ñ –ê–≥–µ–Ω—Ç: –°–ø–∞—Å–∏–±–æ! –í–∞–º {age} –ª–µ—Ç.")
                    break
                else:
                    print("ü§ñ –ê–≥–µ–Ω—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 99 –ª–µ—Ç).")
            except ValueError:
                print("ü§ñ –ê–≥–µ–Ω—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        
        return state
    
    def _get_vacancy_requirements_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        print("ü§ñ –ê–≥–µ–Ω—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:")
        print("   (–≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —É—Å–ª–æ–≤–∏—è)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ (–∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π):")
        vacancy_lines = []
        while True:
            line = input()
            if line.strip() == "":
                break
            vacancy_lines.append(line)
        
        vacancy_text = "\n".join(vacancy_lines).strip()
        
        if vacancy_text:
            state["vacancy_text"] = vacancy_text
            state["messages"].append({"role": "assistant", "content": "–ü–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è..."})
            state["messages"].append({"role": "user", "content": f"–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_text[:100]}..."})
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenRouter
            print("ü§ñ –ê–≥–µ–Ω—Ç: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...")
            analyzed_requirements = self.openrouter_client.analyze_vacancy_requirements(vacancy_text)
            state["vacancy_requirements"] = analyzed_requirements
            state["current_step"] = "vacancy_requirements_collected"
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(analyzed_requirements)} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:")
            for i, req in enumerate(analyzed_requirements[:5], 1):
                print(f"   {i}. {req.get('skill', '')} - {req.get('level', '')} ({req.get('category', '')})")
            
            if len(analyzed_requirements) > 5:
                print(f"   ... –∏ –µ—â–µ {len(analyzed_requirements) - 5} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            default_requirements = [
                {"skill": "Python", "level": "–°—Ä–µ–¥–Ω–∏–π", "category": "–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"},
                {"skill": "–û–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "level": "2+ –≥–æ–¥–∞", "category": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"},
                {"skill": "–ó–Ω–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö", "level": "–ë–∞–∑–æ–≤—ã–π", "category": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"},
                {"skill": "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "level": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "category": "Soft skills"}
            ]
            state["vacancy_requirements"] = default_requirements
            state["vacancy_text"] = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
            state["current_step"] = "vacancy_requirements_collected"
            print("ü§ñ –ê–≥–µ–Ω—Ç: –ë—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.")
        
        return state
    
    def _ask_general_questions_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –ù–∞—á–Ω–µ–º —Å –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ.")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ OpenRouter
        general_questions = self.openrouter_client.generate_general_questions(
            state.get("candidate_name", ""),
            state.get("candidate_age", 0),
            state.get("candidate_position", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        )
        state["general_questions"] = general_questions
        
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        for i, question in enumerate(general_questions[:3], 1):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å {i}: {question}")
            answer = input("üë§ –í–∞—à –æ—Ç–≤–µ—Ç: ").strip()
            
            if answer:
                state["general_answers"].append({
                    "question": question,
                    "answer": answer,
                    "question_number": i
                })
                state["messages"].append({"role": "user", "content": f"–í–æ–ø—Ä–æ—Å {i}: {answer}"})
                print("ü§ñ –ê–≥–µ–Ω—Ç: –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
            else:
                print("ü§ñ –ê–≥–µ–Ω—Ç: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        
        state["current_step"] = "general_questions_completed"
        print(f"\n‚úÖ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°–æ–±—Ä–∞–Ω–æ {len(state['general_answers'])} –æ—Ç–≤–µ—Ç–æ–≤.")
        
        return state
    
    def _generate_technical_questions_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –¢–µ–ø–µ—Ä—å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–∏.")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ OpenRouter
        technical_questions = self.openrouter_client.generate_technical_questions_from_analysis(
            state.get("vacancy_requirements", []),
            state.get("candidate_position", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"),
            state.get("general_answers", [])
        )
        state["technical_questions"] = technical_questions
        
        state["current_step"] = "technical_questions_generated"
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(technical_questions)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        
        return state
    
    def _ask_technical_questions_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.")
        
        technical_questions = state.get("technical_questions", [])
        
        # –ó–∞–¥–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        for i, question in enumerate(technical_questions[:4], 1):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –≤–æ–ø—Ä–æ—Å–∞
            print(f"\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å {i}: {question}")
            answer = input("üë§ –í–∞—à –æ—Ç–≤–µ—Ç: ").strip()
            
            if answer:
                state["technical_answers"].append({
                    "question": question,
                    "answer": answer,
                    "question_number": i,
                    "type": "technical"
                })
                state["messages"].append({"role": "user", "content": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å {i}: {answer}"})
                print("ü§ñ –ê–≥–µ–Ω—Ç: –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            else:
                print("ü§ñ –ê–≥–µ–Ω—Ç: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        
        state["current_step"] = "technical_questions_completed"
        print(f"\n‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°–æ–±—Ä–∞–Ω–æ {len(state['technical_answers'])} –æ—Ç–≤–µ—Ç–æ–≤.")
        
        return state
    
    def _generate_followup_questions_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
        all_answers = state.get("general_answers", []) + state.get("technical_answers", [])
        followup_questions = []
        
        for answer_data in all_answers[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
            followup_question = self.openrouter_client.generate_follow_up_question(
                answer_data["answer"],
                {
                    "question": answer_data["question"],
                    "candidate_name": state.get("candidate_name", ""),
                    "position": state.get("candidate_position", "")
                }
            )
            if followup_question:
                followup_questions.append(followup_question)
        
        state["followup_questions"] = followup_questions
        state["current_step"] = "followup_questions_generated"
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(followup_questions)} —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        
        return state
    
    def _finalize_interview_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é. –°–æ–∑–¥–∞—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç.")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        all_questions = []
        all_questions.extend(state.get("general_questions", []))
        all_questions.extend(state.get("technical_questions", []))
        all_questions.extend(state.get("followup_questions", []))
        
        state["interview_questions"] = all_questions
        state["current_step"] = "interview_completed"
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._create_interview_report(state)
        
        return state
    
    def _generate_questions_node(self, state: dict) -> dict:
        """–ù–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        print("ü§ñ –ê–≥–µ–Ω—Ç: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é.")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ OpenRouter
        questions = self.openrouter_client.generate_interview_questions(
            state.get("candidate_name", ""), 
            state.get("candidate_age", 0), 
            state.get("candidate_position", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        )
        state["interview_questions"] = questions
        
        state["messages"].append({"role": "assistant", "content": "–í–æ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é:"})
        state["current_step"] = "questions_generated"
        
        print("\n" + "="*50)
        print("üìã –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –ò–ù–¢–ï–†–í–¨–Æ")
        print("="*50)
        print(f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {state.get('candidate_name', '')}")
        print(f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {state.get('candidate_age', 0)} –ª–µ—Ç")
        print(f"üíº –ü–æ–∑–∏—Ü–∏—è: {state.get('candidate_position', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')}")
        print("\nüìù –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é:")
        
        for i, question in enumerate(questions, 1):
            print(f"{i}. {question}")
        
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –£–¥–∞—á–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!")
        print("="*50)
        
        return state
    
    def _create_interview_report(self, state: dict):
        """–°–æ–∑–¥–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é"""
        print("\n" + "="*60)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–†–í–¨–Æ")
        print("="*60)
        
        print(f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {state.get('candidate_name', '')}")
        print(f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {state.get('candidate_age', 0)} –ª–µ—Ç")
        print(f"üíº –ü–æ–∑–∏—Ü–∏—è: {state.get('candidate_position', '')}")
        requirements = state.get('vacancy_requirements', [])
        if requirements and isinstance(requirements[0], dict):
            requirements_text = ', '.join([f"{req.get('skill', '')} ({req.get('level', '')})" for req in requirements[:3]])
            if len(requirements) > 3:
                requirements_text += f" –∏ –µ—â–µ {len(requirements) - 3}"
        else:
            requirements_text = ', '.join(requirements) if requirements else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        print(f"üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements_text}")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(state.get('general_questions', []))}")
        print(f"   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(state.get('technical_questions', []))}")
        print(f"   ‚Ä¢ –£—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(state.get('followup_questions', []))}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(state.get('general_answers', [])) + len(state.get('technical_answers', []))}")
        
        print(f"\nüìù –í–°–ï –í–û–ü–†–û–°–´ –ò–ù–¢–ï–†–í–¨–Æ:")
        all_questions = []
        all_questions.extend(state.get("general_questions", []))
        all_questions.extend(state.get("technical_questions", []))
        all_questions.extend(state.get("followup_questions", []))
        
        for i, question in enumerate(all_questions, 1):
            print(f"{i}. {question}")
        
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        print("="*60)
    
    def _generate_personalized_questions(self, name: str, age: int) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        base_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ.",
            "–ü–æ—á–µ–º—É –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏?",
            "–ö–∞–∫–∏–µ —É –≤–∞—Å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?",
            "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É.",
            "–ì–¥–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç?",
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–∞–º?"
        ]
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
        if age < 25:
            personalized_questions = [
                f"–ü—Ä–∏–≤–µ—Ç, {name}! –ö–∞–∫ –º–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö.",
                "–ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ –≤–æ –≤—Ä–µ–º—è —É—á–µ–±—ã –∏–ª–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫?",
                "–ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?"
            ]
        elif age < 35:
            personalized_questions = [
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –∫–∞—Ä—å–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –¥–æ —Å–∏—Ö –ø–æ—Ä.",
                "–ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–º–∏ –≤ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–µ?",
                "–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?"
            ]
        else:
            personalized_questions = [
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –±–æ–≥–∞—Ç—ã–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–ø—ã—Ç–æ–º.",
                "–ö–∞–∫–∏–µ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã —Ä–∞–∑–≤–∏–ª–∏ –∑–∞ –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã?",
                "–ö–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º —Å –º–æ–ª–æ–¥—ã–º–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏?"
            ]
        
        return personalized_questions + base_questions
    
    def run_interview(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω—Ç–µ—Ä–≤—å—é"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é...")
        print("="*50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ —Å –ø—É—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            result = self.graph.invoke({})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            if result:
                self.state.messages = result.get("messages", [])
                self.state.candidate_name = result.get("candidate_name", "")
                self.state.candidate_age = result.get("candidate_age", 0)
                self.state.candidate_position = result.get("candidate_position", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
                self.state.vacancy_text = result.get("vacancy_text", "")
                self.state.vacancy_requirements = result.get("vacancy_requirements", [])
                self.state.general_questions = result.get("general_questions", [])
                self.state.general_answers = result.get("general_answers", [])
                self.state.technical_questions = result.get("technical_questions", [])
                self.state.technical_answers = result.get("technical_answers", [])
                self.state.followup_questions = result.get("followup_questions", [])
                self.state.interview_questions = result.get("interview_questions", [])
                self.state.current_step = result.get("current_step", "start")
                self.state.ai_responses = result.get("ai_responses", [])
                self.state.analysis_results = result.get("analysis_results", [])
            
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            return None
    
    def get_interview_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –∏–Ω—Ç–µ—Ä–≤—å—é"""
        return {
            "candidate_name": self.state.candidate_name,
            "candidate_age": self.state.candidate_age,
            "candidate_position": self.state.candidate_position,
            "vacancy_text": self.state.vacancy_text,
            "vacancy_requirements": self.state.vacancy_requirements,
            "general_questions": self.state.general_questions,
            "general_answers": self.state.general_answers,
            "technical_questions": self.state.technical_questions,
            "technical_answers": self.state.technical_answers,
            "followup_questions": self.state.followup_questions,
            "total_questions": len(self.state.interview_questions),
            "questions": self.state.interview_questions,
            "conversation_history": self.state.messages,
            "ai_responses": self.state.ai_responses,
            "analysis_results": self.state.analysis_results,
            "openrouter_used": config.is_configured()
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
    print("üéØ –ê–ì–ï–ù–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¶–ï–ù–ê–†–ò–Ø –ò–ù–¢–ï–†–í–¨–Æ")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LangGraph –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = InterviewAgent()
    result = agent.run_interview()
    
    if result:
        print("\nüìä –°–í–û–î–ö–ê –ò–ù–¢–ï–†–í–¨–Æ:")
        summary = agent.get_interview_summary()
        print(f"‚úÖ –ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {summary['candidate_name']}")
        print(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {summary['candidate_age']}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {summary['total_questions']}")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")


if __name__ == "__main__":
    main()
