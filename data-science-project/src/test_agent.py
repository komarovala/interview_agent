"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é —Å OpenRouter
"""

from interview_agent import InterviewAgent
from openrouter_client import OpenRouterClient
from config import config
import json


def test_openrouter_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter...")
    
    client = OpenRouterClient()
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    test_messages = [
        {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."},
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
    ]
    
    response = client.generate_response(test_messages)
    
    if response:
        print(f"‚úÖ OpenRouter —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: {response[:100]}...")
        return True
    else:
        print("‚ùå OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
        return False


def test_agent_workflow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –∞–≥–µ–Ω—Ç–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –∞–≥–µ–Ω—Ç–∞...")
    
    agent = InterviewAgent()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    agent.state.candidate_name = "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"
    agent.state.candidate_age = 28
    agent.state.candidate_position = "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤...")
    questions = agent.openrouter_client.generate_interview_questions(
        agent.state.candidate_name,
        agent.state.candidate_age,
        agent.state.candidate_position
    )
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for i, q in enumerate(questions[:3], 1):
        print(f"  {i}. {q}")
    
    if len(questions) > 3:
        print(f"  ... –∏ –µ—â–µ {len(questions) - 3} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    return questions


def test_agent_summary():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–≥–µ–Ω—Ç–∞...")
    
    agent = InterviewAgent()
    agent.state.candidate_name = "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤"
    agent.state.candidate_age = 32
    agent.state.candidate_position = "Data Scientist"
    agent.state.interview_questions = ["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3"]
    
    summary = agent.get_interview_summary()
    
    print("üìä –°–≤–æ–¥–∫–∞ –∞–≥–µ–Ω—Ç–∞:")
    print(f"  –ò–º—è: {summary['candidate_name']}")
    print(f"  –í–æ–∑—Ä–∞—Å—Ç: {summary['candidate_age']}")
    print(f"  –ü–æ–∑–∏—Ü–∏—è: {summary['candidate_position']}")
    print(f"  –í–æ–ø—Ä–æ—Å–æ–≤: {summary['total_questions']}")
    print(f"  OpenRouter: {'‚úÖ' if summary['openrouter_used'] else '‚ùå'}")
    
    return summary


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê –ò–ù–¢–ï–†–í–¨–Æ")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter: {'‚úÖ' if config.is_configured() else '‚ùå'}")
    if config.is_configured():
        print(f"   –ú–æ–¥–µ–ª—å: {config.model}")
    else:
        print("   –†–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    openrouter_works = test_openrouter_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow
    questions = test_agent_workflow()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = test_agent_summary()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  OpenRouter: {'‚úÖ' if openrouter_works else '‚ùå'}")
    print(f"  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {'‚úÖ' if questions else '‚ùå'}")
    print(f"  –°–≤–æ–¥–∫–∞ –∞–≥–µ–Ω—Ç–∞: {'‚úÖ' if summary else '‚ùå'}")
    print(f"  –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢' if all([questions, summary]) else '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    test_result = {
        "openrouter_works": openrouter_works,
        "questions_generated": len(questions) if questions else 0,
        "summary_works": bool(summary),
        "config_configured": config.is_configured(),
        "model": config.model if config.is_configured() else "fallback"
    }
    
    with open('test_result.json', 'w', encoding='utf-8') as f:
        json.dump(test_result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_result.json")


if __name__ == "__main__":
    main()
