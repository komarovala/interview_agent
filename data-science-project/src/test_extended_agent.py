"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
"""

from interview_agent import InterviewAgent
from openrouter_client import OpenRouterClient
from config import config
import json


def test_extended_workflow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ workflow –∞–≥–µ–Ω—Ç–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê")
    print("="*50)
    
    agent = InterviewAgent()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π workflow
    print("üìã –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π workflow...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    test_state = {
        "messages": [],
        "candidate_name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        "candidate_age": 28,
        "candidate_position": "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "vacancy_requirements": ["Python", "Django", "PostgreSQL", "–û–ø—ã—Ç 3+ –ª–µ—Ç"],
        "general_questions": [],
        "general_answers": [],
        "technical_questions": [],
        "technical_answers": [],
        "followup_questions": [],
        "interview_questions": [],
        "current_step": "start",
        "ai_responses": [],
        "analysis_results": []
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    general_questions = agent.openrouter_client.generate_general_questions(
        test_state["candidate_name"],
        test_state["candidate_age"],
        test_state["candidate_position"]
    )
    test_state["general_questions"] = general_questions
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(general_questions)} –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    test_state["general_answers"] = [
        {
            "question": general_questions[0],
            "answer": "–£ –º–µ–Ω—è 5 –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python, —Ä–∞–±–æ—Ç–∞–ª –≤ —Å—Ç–∞—Ä—Ç–∞–ø–∞—Ö –∏ –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö",
            "question_number": 1
        },
        {
            "question": general_questions[1],
            "answer": "–ú–µ–Ω—è –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
            "question_number": 2
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    technical_questions = agent.openrouter_client.generate_technical_questions(
        test_state["vacancy_requirements"],
        test_state["candidate_position"],
        test_state["general_answers"]
    )
    test_state["technical_questions"] = technical_questions
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(technical_questions)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    test_state["technical_answers"] = [
        {
            "question": technical_questions[0],
            "answer": "–ò—Å–ø–æ–ª—å–∑—É—é Django –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∑–Ω–∞—é ORM, middleware, views",
            "question_number": 1,
            "type": "technical"
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    all_answers = test_state["general_answers"] + test_state["technical_answers"]
    followup_questions = []
    
    for answer_data in all_answers[:2]:
        followup_question = agent.openrouter_client.generate_follow_up_question(
            answer_data["answer"],
            {
                "question": answer_data["question"],
                "candidate_name": test_state["candidate_name"],
                "position": test_state["candidate_position"]
            }
        )
        if followup_question:
            followup_questions.append(followup_question)
    
    test_state["followup_questions"] = followup_questions
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(followup_questions)} —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    all_questions = []
    all_questions.extend(test_state["general_questions"])
    all_questions.extend(test_state["technical_questions"])
    all_questions.extend(test_state["followup_questions"])
    test_state["interview_questions"] = all_questions
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_state['general_questions'])}")
    print(f"   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_state['technical_questions'])}")
    print(f"   ‚Ä¢ –£—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_state['followup_questions'])}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(all_questions)}")
    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {len(test_state['general_answers']) + len(test_state['technical_answers'])}")
    
    return test_state


def test_workflow_visualization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ workflow"""
    print("\nüé® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò WORKFLOW")
    print("="*40)
    
    # –ù–æ–≤—ã–µ –Ω–æ–¥—ã –≤ workflow
    nodes = {
        'start': 'üöÄ START',
        'get_name': 'üë§ –ò–ú–Ø',
        'get_age': 'üéÇ –í–û–ó–†–ê–°–¢',
        'get_vacancy_requirements': 'üìã –¢–†–ï–ë–û–í–ê–ù–ò–Ø',
        'ask_general_questions': '‚ùì –û–ë–©–ò–ï –í–û–ü–†–û–°–´',
        'generate_technical_questions': 'üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´',
        'ask_technical_questions': 'üíª –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –û–¢–í–ï–¢–´',
        'generate_followup_questions': 'üîÑ –£–¢–û–ß–ù–Ø–Æ–©–ò–ï –í–û–ü–†–û–°–´',
        'finalize_interview': 'üìä –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø',
        'end': '‚úÖ END'
    }
    
    print("üîÑ –ù–æ–≤—ã–π workflow –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–¥—ã:")
    for node_id, node_label in nodes.items():
        print(f"   {node_label}")
    
    print(f"\nüìà –í—Å–µ–≥–æ –Ω–æ–¥ –≤ workflow: {len(nodes)}")
    print("‚úÖ Workflow —Ä–∞—Å—à–∏—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


def test_openrouter_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenRouter"""
    print("\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OPENROUTER")
    print("="*40)
    
    client = OpenRouterClient()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    general_questions = client.generate_general_questions("–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤", 32, "Data Scientist")
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(general_questions)} –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    requirements = ["Python", "Machine Learning", "Pandas", "Scikit-learn"]
    technical_questions = client.generate_technical_questions(requirements, "Data Scientist", [])
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(technical_questions)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    followup = client.generate_follow_up_question(
        "–†–∞–±–æ—Ç–∞–ª —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º 3 –≥–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—é Python –∏ scikit-learn",
        {"question": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å ML", "candidate_name": "–ò–≤–∞–Ω", "position": "Data Scientist"}
    )
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {followup[:50]}...")
    
    return {
        "general_questions": len(general_questions),
        "technical_questions": len(technical_questions),
        "followup_generated": bool(followup)
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê –ò–ù–¢–ï–†–í–¨–Æ")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter: {'‚úÖ' if config.is_configured() else '‚ùå'}")
    if config.is_configured():
        print(f"   –ú–æ–¥–µ–ª—å: {config.model}")
    else:
        print("   –†–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π workflow
    test_state = test_extended_workflow()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    test_workflow_visualization()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenRouter
    openrouter_results = test_openrouter_integration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê:")
    print(f"  ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π workflow: –†–∞–±–æ—Ç–∞–µ—Ç")
    print(f"  ‚úÖ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {openrouter_results['general_questions']} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    print(f"  ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {openrouter_results['technical_questions']} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    print(f"  ‚úÖ –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {'–†–∞–±–æ—Ç–∞—é—Ç' if openrouter_results['followup_generated'] else '–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç'}")
    print(f"  ‚úÖ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {len(test_state['interview_questions'])}")
    print(f"  ‚úÖ OpenRouter: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.is_configured() else 'Fallback —Ä–µ–∂–∏–º'}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    test_result = {
        "extended_workflow": True,
        "total_questions": len(test_state['interview_questions']),
        "general_questions_count": len(test_state['general_questions']),
        "technical_questions_count": len(test_state['technical_questions']),
        "followup_questions_count": len(test_state['followup_questions']),
        "openrouter_configured": config.is_configured(),
        "model": config.model if config.is_configured() else "fallback",
        "workflow_nodes": 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –≤ –Ω–æ–≤–æ–º workflow
    }
    
    with open('extended_test_result.json', 'w', encoding='utf-8') as f:
        json.dump(test_result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ extended_test_result.json")
    print("üéâ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")


if __name__ == "__main__":
    main()
